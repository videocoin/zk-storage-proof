######### Module level testing ##################

#setup test folder
mkdir /tmp/test

#copy a h.264 test clip to test folder: /tmp/test/test1.mp4
# copy the following binaries to a folder in the linux PATH, for example /usr/bin
# extract-frame, rust-phash, zkptrans

# One-time zksnarks setup. Run setup and generate CRS
zkptrans zkporsetup /tmp/test/zkpor_crs.dat

# 1. extract frames
extract-frame --frame 0 --count 300 --scale --input /tmp/test/test1.mp4 --output /tmp/test/scaled-frames.json

# 2. generate phashes
rust-phash /tmp/test/scaled-frames.json /tmp/test/phashes.json


# 3. Generate challenge. Publisher use this to generate zksnarks public inputs after running steps 1,2
zkptrans zkporchallenge /tmp/test/phashes.json > challenge.json

# 4. generate proof. Worker use this to generate proof after running steps 1,2
zkptrans zkporgenproof /tmp/test/zkpor_crs.dat /tmp/test/zkpor_proof.dat /tmp/test/phashes.json /tmp/test/witness.json

# 5. Verify proof using public input supplied by publsiher. 
zkptrans zkporverify /tmp/test/zkpor_crs.dat /tmp/test/zkpor_proof.dat /tmp/test/witness.json


######### Integration testing with blockchain ##################

# setup
# ~/test/ is used as a scratch folder for the following command.
# This folder should contain zkpor_crs.dat that was created during zksnarks output

# 1. Publisher generates a challnge for a stream(-input) and also specifies the storage location(-output).
#    The command generates an SLA and registers with the blockchain 
./publisher -input /tmp/test/test1.mp4 -output /tmp/test/test1.mp4

# 2. query the registered SLAs
vccli q sla list

# 3. Miner generates proof the stream pointed by SLA and commits to the blockchain
#    The command extractes frames, generates pahshes and then generates zksnarks merkle-proof 
./miner -sla "IUf6pwPjCVYo4xRF3NoQdz01xAEuyHxBGBBl5DApz-E="

# 4. query commit. 
vccli q sla commit "IUf6pwPjCVYo4xRF3NoQdz01xAEuyHxBGBBl5DApz-E="

# 5. Verify
./verify -sla "IUf6pwPjCVYo4xRF3NoQdz01xAEuyHxBGBBl5DApz-E="